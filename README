B.  Create a README file that includes notes describing where in the code to
find the changes you made for each of parts C to J. Each note should include
the prompt, file name, line number, and change.

    * A README file is created located in the d287-java-frameworks repository.


C.  Customize the HTML user interface for your customer’s application.
The user interface should include the shop name,
the product names, and the names of the parts.

    * Changed the title name of the mainscreen.html file on line 14 to "Rego Coffee Tables Shop".
    * Changed the header name on line 19 of the mainscreen.html file to "Rego Coffee Tables Shop".


D.  Add an “About” page to the application to describe your chosen customer’s company
to web viewers and include navigation to and from the “About” page and the main screen.
    * Created an "aboutus.html" page in the templates folder that contain some information about the Rego Coffee Shop.
    * Added a title tot he "aboutus.html" file, line 5
    * Added a header to the "aboutus.html" file on line 10
    * Added a controller class for the about us page in the controllers folder
    * Added a link for the "About Us" page insdide the mainscreen.html file, line 89, that will map to the About us page
    * Added a link to the aboutus.html on line 13 that will map to the "mainscreen.html"

E.  Add a sample inventory appropriate for your chosen store to the application.
You should have five parts and five products in your sample inventory and should not
overwrite existing data in the database.



F.  Add a “Buy Now” button to your product list.
    * mainscreen.html: line 87, I added a buy now button.
    * Controllers directory: I added a BuyProductController for the Buy Now button on the mainscreen.
        * The buy now button decrements product inventory by 1.
        * There is a message that will be displayed to the user if the user tries to buy a product that have 0 inventory.
    * templates directory: I created a confirmationbuyproduct.html file that will display a
      a message when a product is purchased.
    * templates directory: I created a producterrornavigator.html that will display a message informing the user they
      didn't buy the product if the inventory is 0.


G.  Modify the parts to track maximum and minimum inventory
    * Part.java: lines 46 to 61, 97 to 109, I added maxInv and minInv fields and I added a constructor that contain the new fields.
    * mainscreen.html: lines 38 - 39, 48 - 49, Modified the sample parts inventory to include a min inventory and max inventory fields.
    * InhousePartForm.html: lines 24 - 28, I added additional inputs for minInv and maxInv and text for the inhouse part form
    * OutsourcedPartForm.html: lines 25 - 29, I added additional inputs for minInv and maxInv and text for the inhouse part form
    * I renamed the file the persistent storage is saved to.
    * Part.java: lines 139 - 146, I added a method that will check if the inventory is between min inventory and max inventory
    * AddInhousePartController.java: lines 44 - 55, I added a code to enforce the inventory is between the minimum and maximum inventory
    * AddOutsourcedPartController.java: lines 44 - 55, I added a code to enforce the inventory is between the minimum and maximum inventory



H.  Add validation for between or at the maximum and minimum fields.
    * AddInhousePartController.java: lines 44 - 55, I added a code to display a message if the inventory is less the
      minimum and inventory is greater than maximum when adding or updating parts
    * AddOutsourcedPartController.java: lines 44 - 55, I added a code to display a message if the inventory is greater the
      maximum or inventory is less than minimum when adding or updating parts
    * EnufPartsValidator.java: line 36, I added a code that will check if the part inventory is less than minimum when updating
      products and displays a message if the updating lowers the inventory less than the minimum inventory.


I.  Add at least two unit tests for the maximum and minimum fields to the PartTest class
    in the test package.


J.  Remove the class files for any unused validators in order to clean your code.


K.  Demonstrate professional communication in the content and presentation of your
    submission.
